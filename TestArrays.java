package ru.foxit.grayfox;

import java.util.Arrays;
import java.util.Random;

/**
 * Author TestArrays.java - GrayFox | Ilya Lisin
 * Contact: Skype: foxygameskype | Telegram: +7(925)316-65-82 | vk: https://vk.com/exsperto1
 * GitHub: https://github.com/FoxITeam and https://github.com/GrayFoxIT
 * encoding: UTF-8, Comments, remarks in Russian.
 */

/**
 * Важные заметки, которые очень пригодятся на следующих занятиях.
 * <p>
 * + что мы повторили или используем в коде
 * - то что мы не повторяли или не приходилось использовать в коде
 * o - то что мы узнали на этом уроке и нужно повторить на следующем.
 * ++ todo | ctrl + F2 - остановить проект.
 * ++ todo | fori - сокращение цикла for обычная, itar - сокрашения цикла for с массивом, iter - еще не изучали, хотя не пизжу, забыл =D
 * Примечание: fori sout psvm itar и подобные сокращения работают только в методах.
 * ++ todo | с помощью жука (дебагера) кликаем по нужному участку кода, запускаем и шагаем F8 по шагам, смотрим на выполнение кода.
 * ++ todo | alt + Enter (Наводим на if или switch и мы можем переконвертировать их) с if в switch или наоборот.
 * ++ todo | CTRL + / - комментирования выделенных строк в коде.
 * ++ todo | Название переменных и методов начинаются с маленькой буквой, в то время как классы начинаются с большой буквы.
 * -+ todo | CTRL + F - поиск, CTRL + R - замена слова.
 * +- todo | CTRL + SHIFT + ENTER - поставить точку с запятой и перейти на следующую строку.
 * ++ todo | CTRL + D - копировать ту строку, на которую мы нажали и оно вставит ее ниже.
 * ++ todo | Зажимаем ALT и выделяем, выделять будет квадратом.
 * ++ todo | Shift + F10 - запустить проект.
 * ++ todo | Shift + F6 - переименования название методов/переменных.
 * ++ todo | psvm - public static void Main
 * ++ todo | sout - System.out.println
 * ++ todo | Alt+ctrl+L - форматирование текста и кода в IDEA, удобная вещь.
 * ++ todo | Alt + Insert = Можно сгенерировать геттеры и сеттеры.
 * ++ todo | Что такое переменная - по факту это ссылка в адрес памяти и что по этому адресу лежит
 * ++ todo | определяется типом нашей переменной. Типы переменных бывают 2 видов - это
 * ++ todo | примитивные и ссылочные, их всего восемь.
 * ++ todo | Что такое метод - метод, он же в некоторых языках функция, это какое то поведение
 * ++ todo | если класс это описание объекта, допустим машина, то метод это его поведение, то что эта
 * ++ todo | машина может делать, например сигналить.
 * ++ todo | Что такое String в Java? Какой это тип данных?
 * ++ todo | String – это класс в Java, который прописан в пакете java.lang. Это не примитивный тип данных,
 * ++ todo | как int и long. Класс String представляет строковый набор символов.
 * ++ todo | Везде, где мы делаем константную проверку, используем свитч, это экономит ресурсы. if проверяет все, а вот свитч
 * ++ todo | остановиться на нужном условии и выйдет из блока кода, не станет дальше проверять, в отличии от if.
 * ++ todo | Рефакторинг это улучшение кода, когда вы его написали, код который работает, но скорее всего вы его с первого раза не написали
 * ++ todo | его идеально, нам нужно его обработать, обработка напильников, полировка, шлифовка, шпаклей херовка, цементировка, синонимыСловафрафаф тфу...
 */

public class TestArrays {
    // Одномерный массив:
    // С начало мы пишем тип данных, которые мы хотим объявить, начнем с int, далее пишем квадратные скобки
    // после квадратных скобок идет имя! Интеледжи рекомендует название массивов писать в множественном числе (ints).
    // Интеледжи нас так же просит заполнить массив, например три!
    // Что мы сделали: Мы создали интовый массив на три элемента! Это примерно выглядит как список из трех интов.
    // Теперь, мы хотим обратиться к списку элементов массива
    // элементы в Массиве начинаются с нуля, если мы указали 3, то у нас будут индексы - 0 - 1 - 2
    // Если указан интовый массив, все типы должны быть интовые. Если указан массив стринговый, то все данные
    // должны быть стринговые. Нельзя к попугаям положить слонов! Но это по поры до времени! Можно ложить когда мы
    // изучим наследования (ооп).


    public static void main(String[] args) {
        // Первый тип инициализации
        int[] intsArray = new int[3];
        intsArray[0] = 3;
        intsArray[1] = 5;
        intsArray[2] = 13;

        // Второй тип инициализации
        String[] stringsArray = new String[]{"Никита", "Олег", "Роман"};
        System.out.println(stringsArray[1]);

        int[] ints = new int[100];

        // При передачу массиву методу - идет работа с тем же массивом.
        // i = 0, пока i меньше длинный массива, а мы поставили 100, заполнять массив!
        for (int i = 0; i<ints.length; i++){
            // что такое случайные значение?
            // Случайные значения получаются с помощью класса рандом!
            // Создаем экземпляр рандом new Random().
            // Данная конструкция возвращает случайное значение типа инт в границах от нуля до 100 не включительно.
            ints[i] = new Random().nextInt(101);
        }

        // Мы на печать передали конструкцию, Arrays.toString((ints)) - то есть мы выведем цифры в рандомном порядке 100 раз.
        System.out.println(Arrays.toString((ints)));

        // itar, вот и вернулись к тому, что мы ее сейчас начнем использовать! Она оказывается нужна для массивов.
//        for (int i = 0; i < ints.length; i++) {
//            int anInt = ints[i];
//
//        }
    }

}
