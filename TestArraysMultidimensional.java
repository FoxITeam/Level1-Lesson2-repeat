package ru.foxit.grayfox;

/**
 * Author TestArraysMultidimensional.java - GrayFox | Ilya Lisin
 * Contact: Skype: foxygameskype | Telegram: +7(925)316-65-82 | vk: https://vk.com/exsperto1
 * GitHub: https://github.com/FoxITeam and https://github.com/GrayFoxIT
 * encoding: UTF-8, Comments, remarks in Russian.
 */

import java.util.Arrays;

/**
 * Важные заметки, которые очень пригодятся на следующих занятиях.
 * <p>
 * + что мы повторили или используем в коде
 * - то что мы не повторяли или не приходилось использовать в коде
 * o - то что мы узнали на этом уроке и нужно повторить на следующем.
 * ++ todo | ctrl + F2 - остановить проект.
 * ++ todo | fori - сокращение цикла for обычная, itar - сокрашения цикла for с массивом, iter - еще не изучали, хотя не пизжу, забыл =D
 * Примечание: fori sout psvm itar и подобные сокращения работают только в методах.
 * ++ todo | с помощью жука (дебагера) кликаем по нужному участку кода, запускаем и шагаем F8 по шагам, смотрим на выполнение кода.
 * ++ todo | alt + Enter (Наводим на if или switch и мы можем переконвертировать их) с if в switch или наоборот.
 * ++ todo | CTRL + / - комментирования выделенных строк в коде.
 * ++ todo | Название переменных и методов начинаются с маленькой буквой, в то время как классы начинаются с большой буквы.
 * -+ todo | CTRL + F - поиск, CTRL + R - замена слова.
 * +- todo | CTRL + SHIFT + ENTER - поставить точку с запятой и перейти на следующую строку.
 * ++ todo | CTRL + D - копировать ту строку, на которую мы нажали и оно вставит ее ниже.
 * ++ todo | Зажимаем ALT и выделяем, выделять будет квадратом.
 * ++ todo | Shift + F10 - запустить проект.
 * ++ todo | Shift + F6 - переименования название методов/переменных.
 * ++ todo | psvm - public static void Main
 * ++ todo | sout - System.out.println
 * ++ todo | Alt+ctrl+L - форматирование текста и кода в IDEA, удобная вещь.
 * ++ todo | Alt + Insert = Можно сгенерировать геттеры и сеттеры.
 * ++ todo | Что такое переменная - по факту это ссылка в адрес памяти и что по этому адресу лежит
 * ++ todo | определяется типом нашей переменной. Типы переменных бывают 2 видов - это
 * ++ todo | примитивные и ссылочные, их всего восемь.
 * ++ todo | Что такое метод - метод, он же в некоторых языках функция, это какое то поведение
 * ++ todo | если класс это описание объекта, допустим машина, то метод это его поведение, то что эта
 * ++ todo | машина может делать, например сигналить.
 * ++ todo | Что такое String в Java? Какой это тип данных?
 * ++ todo | String – это класс в Java, который прописан в пакете java.lang. Это не примитивный тип данных,
 * ++ todo | как int и long. Класс String представляет строковый набор символов.
 * ++ todo | Везде, где мы делаем константную проверку, используем свитч, это экономит ресурсы. if проверяет все, а вот свитч
 * ++ todo | остановиться на нужном условии и выйдет из блока кода, не станет дальше проверять, в отличии от if.
 * ++ todo | Рефакторинг это улучшение кода, когда вы его написали, код который работает, но скорее всего вы его с первого раза не написали
 * ++ todo | его идеально, нам нужно его обработать, обработка напильников, полировка, шлифовка, шпаклей херовка, цементировка, синонимыСловафрафаф тфу...
 * todo | Случайные значения получаются с помощью класса рандом!
 * todo | В джава всЁ объекты, кроме примитивных типов. Примитивные типы не объекты, но у них есть оболочки!
 * todo |
 * todo |
 */

public class TestArraysMultidimensional {
    // Что такое многомерный массив?
    // По сути это массивы массивов!
    // Если одномерный массив это список, то многомерный массив это матрица!
    // Или матрица для Вас далека, то это таблица, так будет по понятнее!
    // Она же крестики нолики, сетка, ячейки!
    // Инициализируется двумерный массив довольно просто!
    // Скобок становиться теперь 2 и это отвечает за мерность нашего массива.
    // Если создать массив единажды, по ходу кода расширить его нельзя! Только если создать другой массив, скопировать
    // старый массив в новый и потом вернуть расширенный массив, но чтобы такой ебатней не заниматься, нужно
    // ознакомиться с коллекциями, а это будет во втором уровне, я это проходил, сам этот аррей лист использует
    // под капотом обычные массивы и увеличивает их сам самостоятельно, а мы только указываем с чем нам работать.
    public static void main(String[] args) {
        // Можно ли инициализовать массив без new ?
        // да!
        int[] ints1 = {1,2,3,4,5}; // А в фигурные передать необходимое кол-во параметров.

        // В основном Вам массивы понадобятся в учебных целях, массивы уже устарели лет так скажем на 5, так что
        // В основном они будут нужны, чтобы знать, из чего состоят гибкие массивы - такие как аррай листы.
        // И да, массив это объект.
        int[][] ints = new int[3][3];

        System.out.println(ints); // Выведет что это массив и что это его адрес. В джава все объекты, кроме примитивных
        // типов. Примитивные типы не объекты, но у них есть оболочки! То есть у инт есть оболочка Integer,
        //
        Integer a = 1;
        // У нас так же могут разниться массив, например мы можем написать 10 15, то есть не одинаковый размер, а такой
        // какой мы захотим.
        String[][] strings = new String[10][15];

        // fori
        // Тут мы делаем вложенные циклы!

        // int[][] intArray = new int[3][3];

        int[][] intArray = new int[3][];
        intArray[0] = new int[]{1,2,3}; // инициализируем 1 2 3
        intArray[1] = new int[]{4,5,6}; // инициализируем 4 5 6
        intArray[2] = new int[]{7,8,9}; // инициализируем 7 8 9
        intArray[3] = new int[]{44,100,1,47}; // инициализируем 44,100,1,47

        for (int i = 0; i < intArray.length; i++) {
            for (int j = 0; j < intArray[i].length; j++) {
                System.out.println(intArray[i][j]);
            }
        }

        // Двойной массив скажем применяется часто, чем одинарный.
        // Для двойного массива есть гораздо простой метод
        // Arrays - это класс, deepToString - это метод
        // В скобки передаем массив.
        // Очень удобно печатать двумерные массивы
        System.out.println(Arrays.deepToString(intArray));
        // И мы наглядно видим, что мы видим 1 большой массив, внутри которого лежат 3 маленьких массива.
        // [[1, 2, 3], [4, 5, 6], [7, 8, 9]]


        System.out.println(intArray.getClass().getName()); // Гет нейм вернул непонятность, 2 фигурные скобочки они должны
        // быть закрытыми и I это обозначает массив интов
        System.out.println(intArray.getClass().getCanonicalName()); // каноникал нейм - каноничное имя и уровни массива
        System.out.println(intArray.getClass().getSimpleName()); // каноникал нейм - каноничное имя и уровни массива
        System.out.println(intArray.getClass().getTypeName()); // Возвращает имя типа
        // Данные вещи нужны на 3 джаве, когда будем проходить рефлексИю (удаление на И), а пока это развлечение ради.
    }
}
